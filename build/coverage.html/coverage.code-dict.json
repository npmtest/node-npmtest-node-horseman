{"/home/travis/build/npmtest/node-npmtest-node-horseman/test.js":"/* istanbul instrument in package npmtest_node_horseman */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-horseman/lib.npmtest_node_horseman.js":"/* istanbul instrument in package npmtest_node_horseman */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_horseman = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_horseman = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-horseman/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-horseman && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_horseman */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_horseman\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_horseman.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_horseman.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_horseman.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_horseman.__dirname + '/lib.npmtest_node_horseman.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-horseman/node_modules/node-horseman/lib/index.js":"'use strict';\n\nvar clone = require('clone');\nvar defaults = require('defaults');\nvar phantom = require('node-phantom-simple');\nvar path = require('path');\nvar debug = require('debug')('horseman');\nvar debugv = require('debug')('horseman:verbose');\nvar actions = require('./actions');\nvar HorsemanPromise = require('./HorsemanPromise.js');\nvar noop = function() {};\n\n/**\n * Check for npm PhantomJS\n */\nvar phantomjs;\ntry {\n\tphantomjs = require('phantomjs-prebuilt');\n\tdebug('using PhantomJS from phantomjs-prebuilt module');\n} catch (err) {\n\ttry {\n\t\tphantomjs = require('phantomjs');\n\t\tdebug('using PhantomJS from phantomjs module');\n\t} catch (err) {\n\t\tphantomjs = {};\n\t\tdebug('using PhantomJS from $PATH');\n\t}\n}\n\n/**\n * Default options.\n */\nvar DEFAULTS = {\n\ttimeout: 5000,\n\tinterval: 50,\n\tweak: true,\n\tloadImages: true,\n\tsslProtocol: 'any', //sslv3, sslv2, tlsv1, any\n\tinjectJquery: true,\n\tswitchToNewTab: false,\n\tinjectBluebird: false,\n\tphantomPath: phantomjs.path\n};\n\n/**\n * Give each instance a unique ID for debug purposes\n */\nvar instanceId = 0;\n\n\n\nfunction prepare(horseman, instantiationOptions) {\n\treturn new HorsemanPromise(function(resolve, reject) {\n\t\tphantom.create(instantiationOptions, function(err, instance) {\n\t\t\tdebug('phantom created');\n\t\t\thorseman.phantom = instance;\n\t\t\tif (err) {\n\t\t\t\treturn reject(err);\n\t\t\t}\n\t\t\tif (debugv.enabled) {\n\t\t\t\thorseman.phantom.onError = function(msg, trace) {\n\t\t\t\t\tvar str = msg;\n\t\t\t\t\ttrace.forEach(function(t) {\n\t\t\t\t\t\tvar fun = t.function || '<anonymous>';\n\t\t\t\t\t\tstr += '\\n\\t' + t.file + ': ' + t.line + ' in ' + fun;\n\t\t\t\t\t});\n\t\t\t\t\treturn debugv('onPhantomError', str, horseman.id);\n\t\t\t\t};\n\t\t\t}\n\t\t\tinstance.get('version', function(err, ver) {\n\t\t\t\tif (err) { return reject(err); }\n\t\t\t\tvar version = ver.major + '.' + ver.minor + '.' + ver.patch;\n\t\t\t\tdebug('phantom version ' + version);\n\t\t\t\treturn horseman.pageMaker()\n\t\t\t\t\t.then(resolve)\n\t\t\t\t\t.catch(reject);\n\t\t\t});\n\t\t});\n\t})\n\t.then(function() {\n\t\thorseman.pageCnt = 0;\n\t})\n\t.bind(horseman);\n}\n\n/**\n * Creates a new Horseman.\n * @constructor\n */\nvar Horseman = function Horseman(options) {\n\tthis.ready = false;\n\tif (!(this instanceof Horseman)) { return new Horseman(options); }\n\tthis.options = defaults(clone(options) || {}, DEFAULTS);\n\n\tthis.id = ++instanceId;\n\tdebug('.setup() creating phantom instance %s', this.id);\n\n\tvar phantomOptions = {\n\t\t'load-images': this.options.loadImages,\n\t\t'ssl-protocol': this.options.sslProtocol\n\t};\n\n\tif (typeof this.options.ignoreSSLErrors !== 'undefined') {\n\t\tphantomOptions['ignore-ssl-errors'] = this.options.ignoreSSLErrors;\n\t}\n\tif (typeof this.options.webSecurity !== 'undefined') {\n\t\tphantomOptions['web-security'] = this.options.webSecurity;\n\t}\n\tif (typeof this.options.proxy !== 'undefined') {\n\t\tphantomOptions.proxy = this.options.proxy;\n\t}\n\tif (typeof this.options.proxyType !== 'undefined') {\n\t\tphantomOptions['proxy-type'] = this.options.proxyType;\n\t}\n\tif (typeof this.options.proxyAuth !== 'undefined') {\n\t\tphantomOptions['proxy-auth'] = this.options.proxyAuth;\n\t}\n\tif (typeof this.options.diskCache !== 'undefined') {\n\t\tphantomOptions['disk-cache'] = this.options.diskCache;\n\t}\n\tif (typeof this.options.diskCachePath !== 'undefined') {\n\t\tphantomOptions['disk-cache-path'] = this.options.diskCachePath;\n\t}\n\tif (typeof this.options.cookiesFile !== 'undefined') {\n\t\tphantomOptions['cookies-file'] = this.options.cookiesFile;\n\t}\n\n\tif (this.options.debugPort) {\n\t\tphantomOptions['remote-debugger-port'] = this.options.debugPort;\n\t\tphantomOptions['remote-debugger-autorun'] = 'no';\n\t\tif (this.options.debugAutorun !== false) {\n\t\t\tphantomOptions['remote-debugger-autorun'] = 'yes';\n\t\t}\n\t}\n\n\tObject.keys(this.options.phantomOptions || {}).forEach(function (key) {\n\t\tif (typeof phantomOptions[key] !== 'undefined') {\n\t\t\tdebug('Horseman option ' + key + ' overridden by phantomOptions');\n\t\t}\n\t\tphantomOptions[key] = this.options.phantomOptions[key];\n\t}.bind(this));\n\n\tvar instantiationOptions = {\n\t\tparameters: phantomOptions\n\t};\n\n\tif (typeof this.options.phantomPath !== 'undefined') {\n\t\tinstantiationOptions['path'] = this.options.phantomPath;\n\t}\n\n\t// Store the url that was requested for the current url\n\tthis.targetUrl = null;\n\n\t// Store the HTTP status code for resources requested.\n\tthis.responses = {};\n\n\tthis.tabs = [];\n\tthis.onTabCreated = noop;\n\tthis.onTabClosed = noop;\n\n\tthis.ready = prepare(this, instantiationOptions);\n};\n\n/**\n * Attaches a page to the Horseman instance.\n * @param {string} [url=about:blank] - URL to open.\n * @param {Page} [_page] - Page to attach. If null, a new Page will be created.\n * @emits Horseman#tabCreated\n */\nHorseman.prototype.pageMaker = function(url, _page) {\n\tvar self = this;\n\turl = url || 'about:blank';\n\n\t// .try runs synchronously\n\tvar loaded;\n\treturn HorsemanPromise.try(function getPage() {\n\t\t\tvar page;\n\t\t\tif (_page) {\n\t\t\t\tvar p = setupPage(_page);\n\t\t\t\tloaded = _page.loadedPromise();\n\t\t\t\treturn p;\n\t\t\t} else {\n\t\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\t\t\treturn self.phantom.createPage(function(err, page) {\n\t\t\t\t\t\t\tif (page) {\n\t\t\t\t\t\t\t\tvar p = setupPage(page).asCallback(done);\n\t\t\t\t\t\t\t\tloaded = page.loadedPromise();\n\t\t\t\t\t\t\t\treturn p;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn done(err, page);\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.tap(function openPage(page) {\n\t\t\t\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\t\t\t\treturn page.open(url, done);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t}\n\t\t})\n\t\t.tap(function waitForLoadFinished() {\n\t\t\treturn loaded;\n\t\t})\n\t\t.tap(function attachPage(page) {\n\t\t\tif (!_page || self.options.switchToNewTab) {\n\t\t\t\tself.page = page;\n\t\t\t}\n\t\t\tvar tabNum = self.tabs.push(page) - 1;\n\t\t\treturn self.onTabCreated(tabNum, page);\n\t\t})\n\t\t.bind(self);\n\n\t/**\n\t * Needs to be called *BEFORE* page creation callback returns\n\t * This is necessary to avoid having events before callbacks are attached\n\t * @param page - Newly created page to decorate and attach to horseman\n\t */\n\tfunction setupPage(page) {\n\t\tdebug('page created');\n\n\t\tpage.onPageCreated = function(newPage) {\n\t\t\treturn self.ready = self.pageMaker(undefined, newPage)\n\t\t\t\t.tap(function() {\n\t\t\t\t\tpage.onPageCreated2(newPage);\n\t\t\t\t});\n\t\t};\n\t\tpage.onPageCreated2 = noop;\n\n\t\tpage.onResourceReceived = function(response) {\n\t\t\tself.responses[response.url] = response.status;\n\t\t};\n\n\t\tpage.onLoadFinished = loadFinishedSetup;\n\n\t\tpage.onClosing = function() {\n\t\t\tvar tabNum = self.tabs.indexOf(page);\n\t\t\tdebug('closing tab', tabNum);\n\t\t\tself.tabs.splice(tabNum, 1);\n\t\t\tif (self.page === page) {\n\t\t\t\t// Switch to previous tab when current tab closes\n\t\t\t\tself.page = self.tabs[tabNum - 1];\n\t\t\t}\n\t\t\tself.onTabClosed(tabNum, page);\n\t\t};\n\n\t\tpage.onTimeout = noop;\n\n\t\t// Create a Promise for when onLoadFinished callback is done\n\t\tpage.loadedPromise = function() {\n\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\tpage.loadDone = function(err, res) {\n\t\t\t\t\tpage.loadDone = undefined;\n\t\t\t\t\treturn done(err, res);\n\t\t\t\t};\n\t\t\t});\n\t\t};\n\n\t\t// If verbose debug, add default error and consoleMessage handlers\n\t\tif (debugv.enabled) {\n\t\t\tpage.onError = function(msg, trace) {\n\t\t\t\tvar str = msg;\n\t\t\t\ttrace.forEach(function(t) {\n\t\t\t\t\tvar fun = t.function || '<anonymous>';\n\t\t\t\t\tstr += '\\n\\t' + t.file + ': ' + t.line + ' in ' + fun;\n\t\t\t\t});\n\t\t\t\treturn debugv('onError', str, self.id);\n\t\t\t};\n\t\t\tpage.onConsoleMessage = function(msg, lineNum, sourceId) {\n\t\t\t\tvar str = msg + ' line: ' + lineNum + ' in ' + sourceId;\n\t\t\t\treturn debugv('onConsoleMessage', str, self.id);\n\t\t\t};\n\t\t}\n\n\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\treturn page.set(\n\t\t\t\t'settings.resourceTimeout',\n\t\t\t\tself.options.timeout,\n\t\t\t\tdone\n\t\t\t);\n\t\t}).return(page);\n\n\t\t/**\n\t\t * Do any javascript injection on the page\n\t\t * TODO: Consolidate into one page.evaluate?\n\t\t */\n\t\tfunction loadFinishedSetup(status) {\n\t\t\tvar args = arguments;\n\t\t\tself.pageCnt++;\n\t\t\tdebug('phantomjs onLoadFinished triggered', status, self.pageCnt);\n\n\t\t\treturn self.ready = HorsemanPromise.try(function checkStatus() {\n\t\t\t\tif (status !== 'success') {\n\t\t\t\t\tvar err = new Error('Failed to load url');\n\t\t\t\t\treturn HorsemanPromise.reject(err);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(function injectJQuery() {\n\t\t\t\tif (!self.options.injectJquery) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn HorsemanPromise.fromCallback(function hasJQuery(done) {\n\t\t\t\t\treturn page.evaluate(function hasJQuery() {\n\t\t\t\t\t\treturn (typeof window.jQuery !== 'undefined');\n\t\t\t\t\t}, done);\n\t\t\t\t})\n\t\t\t\t.then(function(hasJquery) {\n\t\t\t\t\tif (hasJquery) {\n\t\t\t\t\t\tdebug('jQuery not injected - already exists on page');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar jQueryLocation = path.join(__dirname,\n\t\t\t\t\t\t\t'../files/jquery-2.1.1.min.js');\n\t\t\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\t\t\treturn page.injectJs(jQueryLocation, done);\n\t\t\t\t\t})\n\t\t\t\t\t.tap(function(successful) {\n\t\t\t\t\t\tif (!successful) {\n\t\t\t\t\t\t\tvar err = new Error('jQuery injection failed');\n\t\t\t\t\t\t\treturn HorsemanPromise.reject(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdebug('injected jQuery');\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.then(function injectBluebird() {\n\t\t\t\tvar inject = self.options.injectBluebird;\n\t\t\t\tif (!inject) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\treturn HorsemanPromise.fromCallback(function hasPromise(done) {\n\t\t\t\t\treturn page.evaluate(function hasPromise() {\n\t\t\t\t\t\treturn (typeof window.Promise !== 'undefined');\n\t\t\t\t\t}, done);\n\t\t\t\t})\n\t\t\t\t.then(function(hasPromise) {\n\t\t\t\t\tif (hasPromise && inject !== 'bluebird') {\n\t\t\t\t\t\tdebug('bluebird not injected - ' +\n\t\t\t\t\t\t\t\t'Promise already exists on page');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar bbLoc = 'bluebird/js/browser/bluebird' +\n\t\t\t\t\t\t\t(self.options.bluebirdDebug ? '' : '.min') + '.js';\n\t\t\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\t\t\treturn page.injectJs(require.resolve(bbLoc), done);\n\t\t\t\t\t})\n\t\t\t\t\t.tap(function(successful) {\n\t\t\t\t\t\tif (!successful) {\n\t\t\t\t\t\t\tvar err = new Error('bluebird injection failed');\n\t\t\t\t\t\t\treturn HorsemanPromise.reject(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdebug('injected bluebird');\n\t\t\t\t\t});\n\n\t\t\t\t})\n\t\t\t\t.then(function configBluebird() {\n\t\t\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\t\t\treturn page.evaluate(\n\t\t\t\t\t\t\tfunction configBluebird(noConflict, debug) {\n\t\t\t\t\t\t\t\tif (debug) {\n\t\t\t\t\t\t\t\t\t// TODO: Turn on warnings in bluebird 3\n\t\t\t\t\t\t\t\t\tPromise.longStackTraces();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (noConflict) {\n\t\t\t\t\t\t\t\t\twindow.Bluebird = Promise.noConflict();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tinject === 'bluebird',\n\t\t\t\t\t\t\tself.options.bluebirdDebug,\n\t\t\t\t\t\tdone);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t})\n\t\t\t.then(function initWindow() {\n\t\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\t\treturn page.evaluate(function initWindow() {\n\t\t\t\t\t\twindow.__horseman = {};\n\t\t\t\t\t}, done);\n\t\t\t\t});\n\t\t\t})\n\t\t\t.then(function finishLoad() {\n\t\t\t\tif (page.onLoadFinished2) {\n\t\t\t\t\treturn page.onLoadFinished2.apply(page, args);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.bind(self)\n\t\t\t.asCallback(page.loadDone);\n\t\t}\n\t}\n};\n\n//**************************************************//\n// Actions\n//**************************************************//\n/**\n * Add an action to the Horseman (and HorsemanPromise) prototype.\n * @param {string} name - Name to access action with\n * @param {function} action - Code for the action.\n * this will be bound to the horseman instance.\n */\nHorseman.registerAction = function registerAction(name, action) {\n\tif (typeof name === 'function') {\n\t\t// Work with just a named function\n\t\taction = name;\n\t\tname = action.name;\n\t}\n\n\t// Keep track of page counter before each action\n\tHorseman.prototype[name] = function() {\n\t\tthis.lastActionPageCnt = this.curActionPageCnt;\n\t\tthis.curActionPageCnt = this.pageCnt;\n\t\treturn action.apply(this, arguments);\n\t};\n\n\t// Allow chaining actions off HorsemanPromises\n\tHorsemanPromise.prototype[name] = function() {\n\t\tvar args = arguments;\n\t\treturn this.then(function(val) {\n\t\t\tthis.lastVal = val;\n\t\t\treturn this[name].apply(this, args);\n\t\t});\n\t};\n};\n\n/**\n * Attach all of the actions.\n */\nObject.keys(actions).forEach(function attachAction(name) {\n\tHorseman.registerAction(name, actions[name]);\n});\n\n//**************************************************//\n// Cleanup\n//**************************************************//\nHorseman.prototype.close = function() {\n\tdebug('.close().');\n\tvar self = this;\n\treturn this.ready.finally(function() {\n\t\tvar p;\n\t\tif (!self.closed && self.phantom) {\n\t\t\tp = HorsemanPromise.fromCallback(function(done) {\n\t\t\t\treturn self.phantom.exit(done);\n\t\t\t});\n\t\t}\n\t\t//self.ready = HorsemanPromise.reject(new Error('phantom is closed'));\n\t\tself.closed = true;\n\t\treturn p || HorsemanPromise.resolve();\n\t});\n};\nHorsemanPromise.prototype.close = function() {\n\tvar self = this;\n\treturn this\n\t\t.finally(function() {\n\t\t\treturn this.close();\n\t\t}).finally(function() {\n\t\t\treturn self;\n\t\t});\n};\n\nmodule.exports = Horseman;\nmodule.exports.TimeoutError = HorsemanPromise.TimeoutError;\n","/home/travis/build/npmtest/node-npmtest-node-horseman/node_modules/node-horseman/lib/actions.js":"'use strict';\n\nvar fs = require('fs');\nvar util = require('util');\nvar url = require('url');\nvar defaults = require('defaults');\nvar cookiesTxt = require('cookies.txt');\nvar dataUriToBuffer = require('data-uri-to-buffer');\nvar debug = require('debug')('horseman');\nvar debugv = require('debug')('horseman:verbose');\nvar HorsemanPromise = require('./HorsemanPromise');\nvar TimeoutError = HorsemanPromise.TimeoutError;\n\n\n//**************************************************//\n// Navigation\n//**************************************************//\n\n/**\n * Get or set the user agent for Phantom.\n * @param {string} [userAgent] - User agent to use.\n */\nexports.userAgent = function(userAgent) {\n\tvar self = this;\n\treturn this.ready.then(function() {\n\t\treturn new HorsemanPromise(function(resolve, reject) {\n\t\t\tif (!userAgent) {\n\t\t\t\tself.page.get('settings', function(err, settings) {\n\t\t\t\t\tdebug('.userAgent() get');\n\t\t\t\t\tif (err) { return reject(err); }\n\t\t\t\t\treturn resolve(settings.userAgent);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tself.page.get('settings', function(err, settings) {\n\t\t\t\t\tif (err) { return reject(err); }\n\t\t\t\t\tsettings.userAgent = userAgent;\n\t\t\t\t\tself.page.set('settings', settings, function(err) {\n\t\t\t\t\t\tif (err) { return reject(err); }\n\t\t\t\t\t\tdebug('.userAgent() set', userAgent);\n\t\t\t\t\t\treturn resolve();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n};\n\n/**\n * Open a url in Phantom.\n * @param {string} url\n * @param {string | object} [method=GET] - HTTP method, or settings object\n * @param {string} [data]\n * @see {@link http://phantomjs.org/api/webpage/method/open.html|PhantomJS API}\n */\nexports.open = function(url, method) {\n\tvar args = Array.prototype.slice.call(arguments);\n\tvar self = this;\n\tself.targetUrl = url;\n\n\treturn this.ready.then(function() {\n\t\tmethod = method || 'GET';\n\t\tvar meth = (typeof method === 'object') ? method.operation : method;\n\t\tmeth = meth.toUpperCase();\n\n\t\tif (args.length >= 2) {\n\t\t\tdebug('.open()', meth, url);\n\t\t} else {\n\t\t\tdebug('.open()', url);\n\t\t}\n\t\tvar loaded = self.page.loadedPromise();\n\t\tloaded.catch(function() {});\n\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\targs.push(done);\n\t\t\t\treturn self.page.open.apply(self.page, args);\n\t\t\t})\n\t\t\t.tap(function checkStatus(status) {\n\t\t\t\tif (status !== 'success') {\n\t\t\t\t\tvar err = new Error('Failed to ' + meth + ' url: ' + url);\n\t\t\t\t\treturn HorsemanPromise.reject(err);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.tap(function waitFoLoadFinished() {\n\t\t\t\t// Make sure page injecting is done\n\t\t\t\treturn loaded;\n\t\t\t});\n\t});\n};\n\n/**\n * Set headers sent to the remote server during an 'open'.\n * @param {Object[]} headers\n */\nexports.headers = function(headers) {\n\tvar self = this;\n\n\treturn this.ready.then(function() {\n\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\tdebug('.headers()');\n\t\t\tself.page.set('customHeaders', headers, done);\n\t\t});\n\t});\n};\n\n/**\n * Go back a page.\n */\nexports.back = function() {\n\tvar self = this;\n\treturn this.ready.then(function() {\n\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\tdebug('.back()');\n\t\t\tself.page.goBack(done);\n\t\t});\n\t});\n};\n\n/**\n * Go forwards a page.\n */\nexports.forward = function() {\n\tvar self = this;\n\treturn this.ready.then(function() {\n\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\tdebug('.forward()');\n\t\t\tself.page.goForward(done);\n\t\t});\n\t});\n};\n\n/**\n * Use basic HTTP authentication when opening a page.\n * @param {string} user\n * @param {string} password\n */\nexports.authentication = function(user, password) {\n\tvar self = this;\n\treturn this.ready.then(function() {\n\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\tself.page.get('settings', function(err, settings) {\n\t\t\t\tif (err) { return done(err); }\n\t\t\t\tdebug('.authentiation() set');\n\t\t\t\tsettings.userName = user;\n\t\t\t\tsettings.password = password;\n\t\t\t\tself.page.set('settings', settings, done);\n\t\t\t});\n\t\t});\n\t});\n};\n\n/**\n * Get or set the size of the viewport.\n * @param {number} [width]\n * @param {number} [height]\n */\nexports.viewport = function(width, height) {\n\tvar self = this;\n\tif (!width) {\n\t\tdebug('.viewport() get');\n\t\treturn this.ready.then(function() {\n\t\t\treturn self.__evaluate(function getViewport() {\n\t\t\t\treturn {\n\t\t\t\t\twidth: window.innerWidth,\n\t\t\t\t\theight: window.innerHeight\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t} else {\n\t\tdebug('.viewport() set', width, height);\n\t\treturn this.ready.then(function() {\n\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\tvar viewport = {\n\t\t\t\t\twidth: width,\n\t\t\t\t\theight: height\n\t\t\t\t};\n\t\t\t\tself.page.set('viewportSize', viewport, done);\n\t\t\t});\n\t\t});\n\t}\n};\n\n/**\n * Set the zoom factor of the page.\n * @param {number} zoomFactor\n */\nexports.zoom = function(zoomFactor) {\n\tvar self = this;\n\tdebug('.zoomFactor() set', zoomFactor);\n\treturn this.ready.then(function() {\n\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\tself.page.set('zoomFactor', zoomFactor, done);\n\t\t});\n\t});\n};\n\n/**\n * Scroll to a position on the page.\n * @param {number} top\n * @param {number} left\n */\nexports.scrollTo = function(top, left) {\n\tvar self = this;\n\n\tvar position = {\n\t\ttop: top,\n\t\tleft: left\n\t};\n\tdebug('.scrollTo()', top, left);\n\treturn this.ready.then(function() {\n\t\treturn new HorsemanPromise(function(resolve, reject) {\n\t\t\tself.page.set('scrollPosition', position, function(err) {\n\t\t\t\tif (err) { return reject(err); }\n\t\t\t\treturn resolve();\n\t\t\t});\n\t\t});\n\t});\n};\n\n/**\n * Send Post data to a url.\n * @param {string} url\n * @param {string} postData\n */\nexports.post = function(url, postData) {\n\tdebug('.post()', url);\n\treturn this.open(url, 'POST', postData);\n};\n\n/**\n * Send Put data to a url.\n * @param {string} url\n * @param {string} putData\n */\nexports.put = function(url, putData) {\n\tdebug('.put()', url);\n\treturn this.open(url, 'PUT', putData);\n};\n\n\n/**\n * Reload the page.\n */\nexports.reload = function() {\n\tdebug('.reload()');\n\treturn this.__evaluate(function reload() {\n\t\tdocument.location.reload(true);\n\t});\n};\n\n/**\n * Get or set the cookies for Phantom.\n * @param {object|object[]|string} arg - Cookie, array of cookies,\n * or cookies.txt file\n * @see {@link http://www.cookiecentral.com/faq/#3.5|cookies.txt format}\n */\nexports.cookies = function(arg) {\n\tvar self = this;\n\treturn this.ready.then(function() {\n\t\tif (arg) {\n\t\t\tif (arg instanceof Array) { // replace all the cookies!\n\t\t\t\treturn HorsemanPromise\n\t\t\t\t\t.fromCallback(function(done) {\n\t\t\t\t\t\treturn self.phantom.clearCookies(done);\n\t\t\t\t\t})\n\t\t\t\t\t.tap(function() {\n\t\t\t\t\t\tdebug('.cookies() reset');\n\t\t\t\t\t})\n\t\t\t\t\t.return(arg)\n\t\t\t\t\t.each(function(cookie) {\n\t\t\t\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\t\t\t\tself.phantom.addCookie(cookie, done);\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t}\n\t\t\tswitch (typeof arg) {\n\t\t\t\t// adding one cookie\n\t\t\t\tcase 'object':\n\t\t\t\t\treturn HorsemanPromise\n\t\t\t\t\t\t.fromCallback(function(done) {\n\t\t\t\t\t\t\treturn self.phantom.addCookie(arg, done);\n\t\t\t\t\t\t}).tap(function() {\n\t\t\t\t\t\t\tdebug('.cookies() added');\n\t\t\t\t\t\t});\n\t\t\t\t// replace all cookies with file cookies\n\t\t\t\tcase 'string':\n\t\t\t\t\treturn HorsemanPromise\n\t\t\t\t\t\t.fromCallback(function(done) {\n\t\t\t\t\t\t\treturn self.phantom.clearCookies(done);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.tap(function() {\n\t\t\t\t\t\t\tdebug('.cookies() reset');\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(function() {\n\t\t\t\t\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\t\t\t\t\treturn cookiesTxt.parse(arg, function(cookies) {\n\t\t\t\t\t\t\t\t\treturn done(null, cookies);\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.each(function(cookie) {\n\t\t\t\t\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\t\t\t\t\tself.phantom.addCookie(cookie, done);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t}\n\t\t} else { // return cookies for this page\n\t\t\treturn HorsemanPromise\n\t\t\t\t.fromCallback(function(done) {\n\t\t\t\t\treturn self.page.get('cookies', done);\n\t\t\t\t})\n\t\t\t\t.tap(function() {\n\t\t\t\t\tdebug('.cookies() returned');\n\t\t\t\t});\n\t\t}\n\t});\n};\n\n//**************************************************//\n// Interaction\n//**************************************************//\n\n/**\n * Save a screenshot to disk.\n * @param {string} path\n */\nexports.screenshot = function(path) {\n\tvar self = this;\n\treturn this.ready.then(function() {\n\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\tdebug('.screenshot()', path);\n\t\t\tself.page.render(path, done);\n\t\t});\n\t});\n};\n\n/**\n * Click on a selector and fire a 'click event'.\n * @param {string} selector\n */\nexports.click = function(selector) {\n\tvar self = this;\n\n\tdebug('.click()', selector);\n\treturn self.__evaluate(function click(selector) {\n\t\tvar element;\n\t\tvar event;\n\t\tif (window.jQuery) {\n\t\t\telement = jQuery(selector);\n\t\t\tevent = document.createEvent('MouseEvent');\n\t\t\tevent.initEvent('click', true, true);\n\t\t\telement.get(0).dispatchEvent(event);\n\t\t} else {\n\t\t\telement = document.querySelector(selector);\n\t\t\tevent = document.createEvent('MouseEvent');\n\t\t\tevent.initEvent('click', true, true);\n\t\t\telement.dispatchEvent(event);\n\t\t}\n\t}, selector)\n\t.tap(function() { debug('.click() done'); });\n};\n\n/**\n * Get the bounding rectangle of a selector.\n * @param {string} selector\n */\nexports.boundingRectangle = function(selector) {\n\tvar self = this;\n\treturn this.__evaluate(function boundingRectangle(selector) {\n\t\tif (window.jQuery) {\n\t\t\treturn jQuery(selector)[0].getBoundingClientRect();\n\t\t} else {\n\t\t\tvar element = document.querySelector(selector);\n\t\t\treturn element.getBoundingClientRect();\n\t\t}\n\t}, selector);\n};\n\n/**\n * Save a cropped screenshot to disk.\n * @param {strning|object} area\n * @param {string} path\n * @see window.getBoundingRectangle\n */\nexports.crop = function(area, path) {\n\tvar self = this;\n\tfunction doCrop(area) {\n\t\treturn self.ready\n\t\t\t.then(function getZoomFactor() {\n\t\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\t\treturn self.page.get('zoomFactor', done);\n\t\t\t\t});\n\t\t\t}).then(function(zoomFactor) {\n\t\t\t\tvar rect = {\n\t\t\t\t\ttop: area.top * zoomFactor,\n\t\t\t\t\tleft: area.left * zoomFactor,\n\t\t\t\t\twidth: area.width * zoomFactor,\n\t\t\t\t\theight: area.height * zoomFactor\n\t\t\t\t};\n\t\t\t\treturn self.ready\n\t\t\t\t\t.then(function getClipRect() {\n\t\t\t\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\t\t\t\treturn self.page.get('clipRect', done);\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.tap(function setClipRect(prevClipRect) {\n\t\t\t\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\t\t\t\treturn self.page.set('clipRect', rect, done);\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.tap(function screenShot() {\n\t\t\t\t\t\treturn self.screenshot(path);\n\t\t\t\t\t});\n\t\t\t})\n\t\t\t.then(function resetClipRect(prevClipRect) {\n\t\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\t\treturn self.page.set('clipRect', prevClipRect, done);\n\t\t\t\t});\n\t\t\t});\n\t}\n\tif (typeof area === 'string') {\n\t\treturn this\n\t\t\t.boundingRectangle(area)\n\t\t\t.then(doCrop);\n\t} else {\n\t\treturn doCrop(area);\n\t}\n};\n\n/**\n * Take a base64 encoded cropped screenshot.\n * @param {string|object} area\n * @param {string} type - Type of image (e.g., PNG)\n * @see window.getBoundingRectangle\n */\nexports.cropBase64 = function(area, type) {\n\tvar self = this;\n\tfunction doCrop(area) {\n\t\tvar b64;\n\t\treturn self.ready\n\t\t\t.then(function getZoomFactor() {\n\t\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\t\treturn self.page.get('zoomFactor', done);\n\t\t\t\t});\n\t\t\t}).then(function(zoomFactor) {\n\t\t\t\tvar rect = {\n\t\t\t\t\ttop: area.top * zoomFactor,\n\t\t\t\t\tleft: area.left * zoomFactor,\n\t\t\t\t\twidth: area.width * zoomFactor,\n\t\t\t\t\theight: area.height * zoomFactor\n\t\t\t\t};\n\t\t\t\treturn self.ready\n\t\t\t\t\t.then(function getClipRect() {\n\t\t\t\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\t\t\t\treturn self.page.get('clipRect', done);\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.tap(function setClipRect(prevClipRect) {\n\t\t\t\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\t\t\t\treturn self.page.set('clipRect', rect, done);\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.tap(function renderBase64() {\n\t\t\t\t\t\tb64 = self.screenshotBase64(type);\n\t\t\t\t\t\treturn b64;\n\t\t\t\t\t});\n\t\t\t})\n\t\t\t.then(function resetClipRect(prevClipRect) {\n\t\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\t\treturn self.page.set('clipRect', prevClipRect, done);\n\t\t\t\t});\n\t\t\t})\n\t\t\t.then(function() {\n\t\t\t\treturn b64;\n\t\t\t});\n\t}\n\tif (typeof area === 'string') {\n\t\treturn this\n\t\t.boundingRectangle(area)\n\t\t.then(doCrop);\n\t} else {\n\t\treturn doCrop(area);\n\t}\n};\n\n/**\n * Take a base64 encoded screenshot.\n * @param {string} type - Type of image (e.g., PNG)\n */\nexports.screenshotBase64 = function(type) {\n\tif (['PNG', 'GIF', 'JPEG'].indexOf(type) == -1) {\n\t\tdebug('.screenshotBase64() with type ' + type + ' not supported.');\n\t\tdebug('type must be one of PNG, GIF, or JPEG');\n\t\tvar err = new Error('screenshotBase64 type must be PNG, GIF, or JPEG.');\n\t\treturn HorsemanPromise.reject(err);\n\t} else {\n\t\tvar self = this;\n\t\tvar result;\n\t\treturn this.ready.then(function() {\n\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\tdebug('.screenshotBase64()', type);\n\t\t\t\treturn self.page.renderBase64(type, done);\n\t\t\t});\n\t\t});\n\t}\n};\n\n/**\n * Save the current page as a pdf.\n * For more info - http://phantomjs.org/api/webpage/property/paper-size.html\n * @param {string} path - The name and location of where to store the pdf.\n * @param {object} [paperSize] - pdf's format, orientation, margin, and more.\n * @param {string} [paperSize.format] - Format of the pdf.\n * Supported formats are: 'A3', 'A4', 'A5', 'Legal', 'Letter', 'Tabloid'.\n * Default is 'letter' cuz 'Murica.\n * @param {string} [paperSize.orientation] - Orientation of the pdf.\n * Must be 'portrait' or 'landscape'.\n * Default is 'portrait'.\n * @param {string} [paperSize.margin] - Margin of the pdf.\n * Default is '0.5in'.\n */\nexports.pdf = function(path, paperSize) {\n\tvar self = this;\n\tdebug('.pdf()', path, paperSize);\n\tif (!paperSize) {\n\t\tpaperSize = {\n\t\t\tformat: 'Letter',\n\t\t\torientation: 'portrait',\n\t\t\tmargin: '0.5in'\n\t\t};\n\t}\n\treturn this.ready\n\t\t.then(function setPaperSize() {\n\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\treturn self.page.set('paperSize', paperSize, done);\n\t\t\t});\n\t\t})\n\t\t.then(function render() {\n\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\treturn self.page.render(path, {\n\t\t\t\t\tformat: 'pdf',\n\t\t\t\t\tquality: '100'\n\t\t\t\t}, done);\n\t\t\t});\n\t\t})\n\t\t.tap(function() {\n\t\t\tdebug('.pdf() complete');\n\t\t});\n};\n\n/**\n * Injects javascript from a file into the page.\n * @param {string} file - file containing javascript to inject onto the page.\n */\nexports.injectJs = function(file) {\n\tvar self = this;\n\treturn this.ready\n\t\t.then(function() {\n\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\tdebug('.injectJs()', file);\n\t\t\t\treturn self.page.injectJs(file, done);\n\t\t\t});\n\t\t})\n\t\t.tap(function(successful) {\n\t\t\tif (!successful) {\n\t\t\t\tvar err = new Error('failed to inject ' + file);\n\t\t\t\treturn HorsemanPromise.reject(err);\n\t\t\t}\n\t\t});\n};\n\n/**\n * Includes javascript script from a url on the page.\n * @param {string} url - The url to a javascript file to include o the page.\n */\nexports.includeJs = function(url) {\n\tvar self = this;\n\treturn this.ready.then(function() {\n\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\tdebug('.includeJs()', url);\n\t\t\treturn self.page.includeJs(url, done);\n\t\t});\n\t});\n};\n\n/**\n * Select a value in an html select element.\n * @param {string} selector - The identifier for the select element.\n * @param {string} value - The value to select.\n */\nexports.select = function(selector, value) {\n\tdebug('.select()', selector, value);\n\treturn this.value(selector, value);\n};\n\n\n/**\n * Fire a key event.\n * @param {string} [type=keypress] - The type of key event.\n * @param {string} [key=null] - The key to use for the event.\n * @param {number} [modifier=0] - The keyboard modifier to use.\n * @see {@link http://phantomjs.org/api/webpage/method/send-event.html}\n */\nexports.keyboardEvent = function(type, key, modifier) {\n\ttype = (typeof type === 'undefined') ? 'keypress' : type;\n\tkey = (typeof key === 'undefined') ? null : key;\n\tmodifier = (typeof modifier === 'undefined') ? 0 : modifier;\n\n\tvar self = this;\n\treturn self.ready\n\t\t.then(function() {\n\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\tself.page.sendEvent(type, key, null, null, modifier, done);\n\t\t\t});\n\t\t})\n\t\t.tap(function() {\n\t\t\tdebug('.keyboardEvent()', type, key, modifier);\n\t\t});\n};\n\n/**\n * Fire a mouse event.\n * @param {string} [type=click] - The type of mouse event.\n * @param {number} [x=null] - The x location to fire the event at.\n * @param {number} [y=null] - The y location to fire the event at.\n * @param {string} [button=left] - The mouse button to use.\n */\nexports.mouseEvent = function(type, x, y, button) {\n\ttype = (typeof type === 'undefined') ? 'click' : type;\n\tx = (typeof x === 'undefined') ? null : x;\n\ty = (typeof y === 'undefined') ? null : y;\n\tbutton = (typeof button === 'undefined') ? 'left' : button;\n\n\tvar self = this;\n\treturn self.ready\n\t\t.then(function() {\n\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\tself.page.sendEvent(type, x, y, button, done);\n\t\t\t});\n\t\t})\n\t\t.tap(function() {\n\t\t\tdebug('.mouseEvent()', type, x, y, button);\n\t\t});\n};\n\n\n\n/**\n * Simulate a keypress on a selector\n * @param {string} selector - The selctor to type into.\n * @param {string} text - The text to type.\n * @param {object} options - Lets you send keys like control & shift\n */\nexports.type = function(selector, text, options) {\n\tvar DEFAULTS = {\n\t\treset: false, // clear the field first\n\t\teventType: 'keypress', // keypress, keyup, keydown\n\t\tkeepFocus: false // if true, don't blur afterwards\n\t};\n\n\tfunction computeModifier(modifierString) {\n\t\tvar modifiers = {\n\t\t\t'ctrl': 0x04000000,\n\t\t\t'shift': 0x02000000,\n\t\t\t'alt': 0x08000000,\n\t\t\t'meta': 0x10000000,\n\t\t\t'keypad': 0x20000000\n\t\t};\n\t\tvar modifier = 0;\n\t\tvar checkKey = function(key) {\n\t\t\tif (key in modifiers) { return; }\n\t\t\tdebug(key + 'is not a supported key modifier');\n\t\t};\n\t\tif (!modifierString) { return modifier; }\n\t\tvar keys = modifierString.split('+');\n\t\tkeys.forEach(checkKey);\n\t\treturn keys.reduce(function(acc, key) {\n\t\t\treturn acc | modifiers[key];\n\t\t}, modifier);\n\t}\n\n\tvar modifiers = computeModifier(options && options.modifiers);\n\tvar opts = defaults(options || {}, DEFAULTS);\n\n\tvar self = this;\n\n\tdebug('.type()', selector, text, options);\n\treturn self\n\t\t.__evaluate(function focus(selector) {\n\t\t\tif (window.jQuery) {\n\t\t\t\tjQuery(selector).focus();\n\t\t\t} else {\n\t\t\t\tdocument.querySelector(selector).focus();\n\t\t\t}\n\t\t}, selector)\n\t\t.return(text)\n\t\t.call('split', '')\n\t\t.each(function sendKey(key) {\n\t\t\treturn self\n\t\t\t\t.keyboardEvent(opts.eventType, key, null, null, modifiers);\n\t\t});\n};\n\n/**\n * Clear an input field.\n * @param {string} selector - The selctor to clear.\n */\nexports.clear = function(selector) {\n\tdebug('.clear()', selector);\n\treturn this.value(selector, '');\n};\n\n\n/**\n * Upload a file to the page.\n * @param {string} selector - The selctor to to use the upload the file.\n * @param {string} file - The file to upload.\n */\nexports.upload = function(selector, path) {\n\tvar self = this;\n\treturn this.ready\n\t\t.then(function() {\n\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\treturn fs.stat(path, done);\n\t\t\t});\n\t\t})\n\t\t.call('isFile')\n\t\t.then(function(isFile) {\n\t\t\tif (isFile) {\n\t\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\t\treturn self.page.uploadFile(selector, path, done);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tdebug('.upload() file path not valid.');\n\t\t\t\tvar err = new Error('File path for upload is not valid.');\n\t\t\t\treturn HorsemanPromise.reject(err);\n\t\t\t}\n\t\t})\n\t\t.tap(function() {\n\t\t\tdebug('.upload()', path, selector);\n\t\t});\n};\n\n/**\n * Dowload a URL.\n * @param {string} url - URL to download.\n * @param {string} [path] - File to write download to.\n * @param {boolean} [binary=false] - Whether the download is a binary file.\n * @param {string} [method=GET] - HTTP method to use.\n * @param {string} [data] - Request data to send.\n */\n// TODO: Should horseman have a general AJAX action?\nexports.download = function(url, path, binary, method, data) {\n\tvar args = Array.prototype.slice.call(arguments);\n\tmethod = method && method.toUpperCase() || 'GET';\n\tdebug.apply(debug, ['.download() start'].concat(args));\n\treturn this\n\t\t.evaluate(function download(url, binary, method, data, v, done) {\n\t\t\tvar xhr = new XMLHttpRequest();\n\t\t\txhr.open(method, url,  true);\n\t\t\txhr.responseType = binary ? 'blob' : 'text';\n\t\t\txhr.setRequestHeader('Accept', '*/*, image/*');\n\t\t\txhr.addEventListener('load', function downloaded() {\n\t\t\t\tif (!(xhr.status >= 200 && xhr.status < 300)) {\n\t\t\t\t\treturn done(new Error(xhr.response));\n\t\t\t\t}\n\t\t\t\treturn done(null, xhr.response);\n\t\t\t});\n\t\t\tif (v) {\n\t\t\t\txhr.addEventListener('progress', function(e) {\n\t\t\t\t\tconsole.log('dowload progess: ' + 100 * e.loaded / e.total);\n\t\t\t\t});\n\t\t\t}\n\t\t\txhr.addEventListener('error', function(evt) {\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\tdone(new Error('xhr error'));\n\t\t\t\t}, 0);\n\t\t\t});\n\t\t\txhr.send(data);\n\t\t}, url, binary, method, data, debugv.enabled)\n\t\t.tap(function writeFile(buffer) {\n\t\t\tif (path) {\n\t\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\t\treturn fs.writeFile(path, buffer, done);\n\t\t\t\t});\n\t\t\t}\n\t\t})\n\t\t.tap(function() {\n\t\t\tdebug.apply(debug, ['.download() finish'].concat(args));\n\t\t});\n};\n\n/**\n * Run javascript on the page.\n * @param {function} fn - The function to run.\n * @param {...*} [arguments] - The optional arguments to pass to 'fn'.\n */\nexports.manipulate = function(/*fn, arg1, arg2, etc*/) {\n\tthis.__evaluate.apply(this, arguments);\n\treturn this;\n};\n\n\n/**\n * Execute a function without breaking the api chain.\n * @param fn The function to run. Must call 'done()' when complete.\n */\nexports.do = function(fn) {\n\tdebug('.do()', fn.name || '<anonymous>');\n\treturn this.ready.then(function() {\n\t\treturn new HorsemanPromise(function(resolve, reject) {\n\t\t\tfn(resolve);\n\t\t});\n\t});\n};\n\n//**************************************************//\n// Information\n//**************************************************//\n\n/**\n * Run a javascript function on the current page\n * and optionally return the results.\n * @param {function} fn\n * @param {...*} [arguments] - The optional arguments to pass to 'fn'.\n */\nexports.evaluate = function(fn) {\n\tvar args =  Array.prototype.slice.call(arguments, 1);\n\tvar self = this;\n\tvar hasCb = args.length < fn.length; // Whether fn takes a callback\n\tvar fname = fn.name || '<anonymous>';\n\n\tdebug.apply(debug, ['.evaluate()', fname].concat(args));\n\treturn this.ready.then(function() {\n\t\t// Handle this.page changing\n\t\tvar page = self.page;\n\t\tvar evaluate = HorsemanPromise.promisify(page.evaluate).bind(page);\n\n\t\t// TODO: Move evaluate wrapper to a client script?\n\t\t// Make dumy error to make evaluate rejections more debuggable\n\t\tvar stack = HorsemanPromise.reject(new Error('See next line'));\n\t\tvar res = evaluate(function evaluate(fnstr, hasCb, args) {\n\t\t\t\tif(!window.__horseman) {\n\t\t\t\t\twindow.__horseman = {};\n\t\t\t\t}\n\t\t\t\t__horseman.cbargs = undefined;\n\t\t\t\tvar done = function done(err, res) {\n\t\t\t\t\tif (__horseman.cbargs) { return; }\n\t\t\t\t\tvar iserr = err instanceof Error;\n\t\t\t\t\tif (iserr) {\n\t\t\t\t\t\tvar keys = Object.getOwnPropertyNames(err);\n\t\t\t\t\t\terr = keys.reduce(function copyErr(obj, key) {\n\t\t\t\t\t\t\tobj[key] = err[key];\n\t\t\t\t\t\t\treturn obj;\n\t\t\t\t\t\t}, {});\n\t\t\t\t\t}\n\t\t\t\t\tvar isblob = res instanceof Blob;\n\t\t\t\t\tif (isblob) {\n\t\t\t\t\t\tvar reader = new FileReader();\n\t\t\t\t\t\treader.onload = function converted() {\n\t\t\t\t\t\t\tres = reader.result;\n\t\t\t\t\t\t\tddone();\n\t\t\t\t\t\t};\n\t\t\t\t\t\treader.onerror = function() {\n\t\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\t\terr = err || new Error('blob reader error');\n\t\t\t\t\t\t\t\tddone();\n\t\t\t\t\t\t\t}, 0);\n\t\t\t\t\t\t};\n\t\t\t\t\t\treader.readAsDataURL(res);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tddone();\n\t\t\t\t\t}\n\t\t\t\t\tfunction ddone() {\n\t\t\t\t\t\t__horseman.cbargs = {\n\t\t\t\t\t\t\terr: err,\n\t\t\t\t\t\t\tiserr: iserr,\n\t\t\t\t\t\t\tres: res,\n\t\t\t\t\t\t\tisblob: isblob\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\ttry {\n\t\t\t\t\tvar fn;\n\t\t\t\t\teval('fn = ' + fnstr);\n\n\t\t\t\t\tif (hasCb) {\n\t\t\t\t\t\t// Call fn asynchronously\n\t\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\treturn fn.apply(this, args.concat(done));\n\t\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\t\treturn done(err);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 0);\n\t\t\t\t\t\treturn 'c';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar p;\n\t\t\t\t\t\t// Call fn synchronously\n\t\t\t\t\t\tp = fn.apply(this, args);\n\n\t\t\t\t\t\tif (p && typeof p.then === 'function') {\n\t\t\t\t\t\t\t// fn returned a Promise\n\t\t\t\t\t\t\tp.then(function onResolve(res) {\n\t\t\t\t\t\t\t\treturn done(null, res);\n\t\t\t\t\t\t\t}, function onReject(err) {\n\t\t\t\t\t\t\t\treturn done(err);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn 'p';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdone(null, p);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\tdone(err);\n\t\t\t\t}\n\t\t\t\treturn 's';\n\t\t\t}, fn.toString(), hasCb, args)\n\t\t\t.then(function waitForCb(type) {\n\t\t\t\tif (type !== 's') {\n\t\t\t\t\tdebugv('.evaluate() waiting for callback', fname, type,\n\t\t\t\t\t\t\tself.id);\n\t\t\t\t\treturn waitForPage.call(self, page, function waitForCb() {\n\t\t\t\t\t\treturn !!__horseman.cbargs;\n\t\t\t\t\t}, true);\n\t\t\t\t}\n\t\t\t\tdebugv('.evaluate() finished synchronously', fname, type,\n\t\t\t\t\t\tself.id);\n\t\t\t})\n\t\t\t.then(function handleCb() {\n\t\t\t\treturn evaluate(function handleCb() {\n\t\t\t\t\treturn __horseman.cbargs;\n\t\t\t\t});\n\t\t\t})\n\t\t\t.then(function handleErrback(args) {\n\t\t\t\targs = args || {};\n\t\t\t\treturn stack.catch(function fixErr(err) {\n\t\t\t\t\t// TODO: Phantom 2 errors are different than 1\n\t\t\t\t\tif (args.err) {\n\t\t\t\t\t\t// Make long/normal stack traces work\n\t\t\t\t\t\tif (args.iserr) {\n\t\t\t\t\t\t\targs.err.name = args.err.name || 'Error';\n\n\t\t\t\t\t\t\tif (!args.err.stack) {\n\t\t\t\t\t\t\t\targs.err.stack = args.err.toString();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\targs.err.stack.replace(/\\n*$/g, '\\n');\n\t\t\t\t\t\t\tvar stack = err.stack.split('\\n').slice(1);\n\t\t\t\t\t\t\t// Append Node stack to Phantom stack\n\t\t\t\t\t\t\targs.err.stack += stack.join('\\n');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (args.err.stack) {\n\t\t\t\t\t\t\targs.err.toString = function() {\n\t\t\t\t\t\t\t\treturn this.name + ': ' + this.message;\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn HorsemanPromise.reject(args.err);\n\t\t\t\t\t}\n\t\t\t\t\tif (args.isblob) {\n\t\t\t\t\t\treturn dataUriToBuffer(args.res);\n\t\t\t\t\t}\n\t\t\t\t\treturn args.res;\n\t\t\t\t});\n\t\t\t});\n\t\tstack.catch(function() {});\n\t\treturn res;\n\t});\n};\n\n/**\n * Syncronous only version of evaluate, handles throws.\n * Should probably only be used internally.\n * @param {function} fn\n * @param {...*} [arguments]\n */\nexports.__evaluate = function() {\n\tvar args = Array.prototype.concat.apply([this.page], arguments);\n\treturn evaluatePage.apply(this, args);\n};\n/**\n * Evaluates a function on the given page.\n * @this Horseman\n * @param {Page} page\n * @param {function} fn\n * @param {...*} [arguments]\n */\nfunction evaluatePage(page, fn) {\n\tvar args =  Array.prototype.slice.call(arguments, 2);\n\treturn this.ready.then(function() {\n\t\tvar stack;\n\t\tpage = page || this.page;\n\t\tvar res = HorsemanPromise.fromCallback(function(done) {\n\t\t\t\t// Wrap fn to be able to catch exceptions and reject Promise\n\t\t\t\tstack = HorsemanPromise.reject(new Error('See next line'));\n\t\t\t\treturn page.evaluate(function evaluatePage(fnstr, args) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar fn;\n\t\t\t\t\t\teval('fn = ' + fnstr);\n\n\t\t\t\t\t\tvar res = fn.apply(this, args); // Call fn with args\n\t\t\t\t\t\treturn { res: res };\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\treturn { err: err, iserr: err instanceof Error };\n\t\t\t\t\t}\n\t\t\t\t}, fn.toString(), args, done);\n\t\t\t})\n\t\t\t.then(function handleErrback(args) {\n\t\t\t\treturn stack.catch(function(err) {\n\t\t\t\t\tif (args.err) {\n\t\t\t\t\t\tif (args.iserr) {\n\t\t\t\t\t\t\tvar stack = err.stack.split('\\n').slice(1);\n\t\t\t\t\t\t\t// Append Node stack to Phantom stack\n\t\t\t\t\t\t\targs.err.stack += '\\n' + stack.join('\\n');\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn HorsemanPromise.reject(args.err);\n\t\t\t\t\t}\n\t\t\t\t\treturn args.res;\n\t\t\t\t});\n\t\t\t});\n\t\tstack.catch(function() {});\n\t\treturn res;\n\t});\n}\n\n\n/**\n * Get the url of the current page.\n */\nexports.url = function() {\n\tdebug('.url()');\n\treturn this.__evaluate(function url() {\n\t\treturn document.location.href;\n\t});\n};\n\n/**\n * Count the number of occurances of 'selector' on the page.\n * @param {string} selector\n */\nexports.count = function(selector) {\n\tdebug('.count()', selector);\n\treturn this.__evaluate(function count(selector) {\n\t\tvar matches = (window.jQuery) ?\n\t\t\t\tjQuery(selector) : document.querySelectorAll(selector);\n\t\treturn matches.length;\n\t}, selector);\n};\n\n/**\n * Get the title of the current page.\n */\nexports.title = function() {\n\tdebug('.title()');\n\treturn this.__evaluate(function title() {\n\t\treturn document.title;\n\t});\n};\n\n\n/**\n * Determine if the selector exists, at least once, on the page.\n * @param {string} [selector]\n */\nexports.exists = function(selector) {\n\tdebug('.exists()', selector);\n\treturn this.count(selector).then(function(count) {\n\t\treturn count > 0;\n\t});\n};\n\n/**\n * Get the HTML for the page, or optionally for a selector.\n * @param {string} [selector]\n * @param {string} [file] - File to which to write the HTML.\n */\nexports.html = function(selector, file) {\n\tdebug('.html()', selector);\n\treturn this\n\t\t.__evaluate(function html(selector) {\n\t\t\tif (selector) {\n\t\t\t\treturn (window.jQuery) ?\n\t\t\t\t\t\tjQuery(selector).html() :\n\t\t\t\t\t\tdocument.querySelector(selector).innerHTML;\n\t\t\t} else {\n\t\t\t\treturn (window.jQuery) ?\n\t\t\t\t\t\tjQuery('html').html() :\n\t\t\t\t\t\tdocument.documentElement.innerHTML;\n\t\t\t}\n\t\t}, selector)\n\t\t.tap(function writeHtmlToFile(html) {\n\t\t\tif (file) {\n\t\t\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\t\t\treturn fs.writeFile(file, html, done);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n};\n\n/**\n * Get the text for the body of the page, or optionally for a selector.\n * @param {string} [selector]\n */\nexports.text = function(selector) {\n\tdebug('.text()', selector);\n\treturn this.__evaluate(function text(selector) {\n\t\tif (selector) {\n\t\t\treturn (window.jQuery) ?\n\t\t\t\t\tjQuery(selector).text() :\n\t\t\t\t\tdocument.querySelector(selector).textContent;\n\t\t} else {\n\t\t\treturn (window.jQuery) ?\n\t\t\t\t\tjQuery('body').text() :\n\t\t\t\t\tdocument.querySelector('body').textContent;\n\t\t}\n\t}, selector);\n};\n\n/**\n * Get the plain text for the body of the page.\n */\nexports.plainText = function() {\n\tvar self = this;\n\treturn this.ready.then(function() {\n\t\treturn HorsemanPromise\n\t\t\t.fromCallback(function(done) {\n\t\t\t\treturn self.page.get('plainText', done);\n\t\t\t});\n\t});\n};\n\n/**\n * Get the value of an attribute for a selector.\n * @param {string} selector\n * @param {string} attr\n */\nexports.attribute = function(selector, attr) {\n\tdebug('.attribute()', selector, attr);\n\treturn this.__evaluate(function attribute(selector, attr) {\n\t\treturn (window.jQuery) ?\n\t\t\t\tjQuery(selector).attr(attr) :\n\t\t\t\tdocument.querySelector(selector).getAttribute(attr);\n\t}, selector, attr);\n};\n\n/**\n * Get the value of an css property of a selector.\n * @param {string} selector\n * @param {string} prop\n */\nexports.cssProperty = function(selector, prop) {\n\tdebug('.cssProperty()', selector, prop);\n\treturn this.__evaluate(function cssProperty(selector, prop) {\n\t\treturn (window.jQuery) ?\n\t\t\t\tjQuery(selector).css(prop) :\n\t\t\t\twindow.getComputedStyle(document.querySelector(selector))[prop];\n\t}, selector, prop);\n};\n\n/**\n * Get the width of an element.\n * @param {string} selector\n */\nexports.width = function(selector) {\n\tdebug('.width()', selector);\n\treturn this.__evaluate(function width(selector) {\n\t\treturn (window.jQuery) ?\n\t\t\t\tjQuery(selector).width() :\n\t\t\t\tdocument.querySelector(selector).offsetWidth;\n\t}, selector);\n};\n\n/**\n * Get the height of an element.\n * @param {string} selector\n */\nexports.height = function(selector) {\n\tdebug('.height()', selector);\n\treturn this.__evaluate(function height(selector) {\n\t\treturn (window.jQuery) ?\n\t\t\t\tjQuery(selector).height() :\n\t\t\t\tdocument.querySelector(selector).offsetHeight;\n\t}, selector);\n};\n\n/**\n * Get or set the value of an element.\n * @param {string} selector - The selector to find or set the value of.\n * @param {string} [value] - The value to set the selector to.\n */\nexports.value = function(selector, value) {\n\tdebug('.value()', selector, value);\n\tvar self = this;\n\tif (typeof value === 'undefined') { // get the value of an element\n\t\treturn self\n\t\t\t.__evaluate(function valueGet(selector) {\n\t\t\t\treturn (window.jQuery) ?\n\t\t\t\t\t\tjQuery(selector).val() :\n\t\t\t\t\t\tdocument.querySelector(selector).value;\n\t\t\t}, selector)\n\t\t\t.then(function(val) {\n\t\t\t\tif (val === null) {\n\t\t\t\t\treturn this\n\t\t\t\t\t\t.exists(selector)\n\t\t\t\t\t\t.then(function(exists) {\n\t\t\t\t\t\t\treturn (exists) ? '' : val;\n\t\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn val;\n\t\t\t\t}\n\n\t\t\t});\n\n\t} else { // set the value of an element\n\t\treturn self.__evaluate(function valueSet(selector, value) {\n\t\t\tif (window.jQuery) {\n\t\t\t\tjQuery(selector).val(value).change();\n\t\t\t} else {\n\t\t\t\tvar element = document.querySelector(selector);\n\t\t\t\tvar event = document.createEvent('HTMLEvents');\n\t\t\t\telement.value = value;\n\t\t\t\tevent.initEvent('change', true, true);\n\t\t\t\telement.dispatchEvent(event);\n\t\t\t}\n\t\t}, selector, value);\n\t}\n};\n\n/**\n * Determines if an element is visible.\n * @param {string} selector - The selector to find the visibility of.\n */\nexports.visible = function(selector) {\n\tdebug('.visible()', selector);\n\treturn this\n\t\t.__evaluate(function visible(selector) {\n\t\t\tif (window.jQuery) {\n\t\t\t\treturn jQuery(selector).is(':visible');\n\t\t\t} else {\n\t\t\t\tvar elem = document.querySelector(selector);\n\t\t\t\treturn elem && (elem.offsetWidth > 0 && elem.offsetHeight > 0);\n\t\t\t}\n\t\t}, selector)\n\t\t.then(function(vis) {\n\t\t\treturn vis || false;\n\t\t});\n};\n\n/**\n * Log the output from either a previous chain method,\n * or a string the user passed in.\n * @param output\n */\nexports.log = function(output) {\n\tif (arguments.length === 0) {\n\t\toutput = this.lastVal;\n\t}\n\n\treturn this.ready.then(function() {\n\t\tconsole.log(output);\n\t\treturn this.lastVal;\n\t});\n};\n\n//**************************************************//\n// Tabs\n//**************************************************//\n\nexports.tabCount = function() {\n\tvar self = this;\n\treturn this.ready.then(function() {\n\t\treturn self.tabs.length;\n\t});\n};\n\n/**\n * Switch to another of the open tabs\n * @param {integer} tabNumber - The number of the tab to switch to (from 0)\n */\nexports.switchToTab = function(tabNumber) {\n\treturn this.ready.then(function() {\n\t\tthis.page = this.tabs[tabNumber];\n\t});\n};\n\n/**\n * Open URL in a new tab\n * @param url - the URL to open in the newly created tab\n */\nexports.openTab = function(url) {\n\tvar self = this;\n\tself.targetUrl = url;\n\treturn this.ready.then(function() {\n\t\treturn self.pageMaker(url);\n\t});\n};\n\n/**\n * Close a tab and release its resources.\n * @param {integer} tabNumber - The number of the tab to close.\n */\nexports.closeTab = function(tabNumber) {\n\tvar self = this;\n\tdebug('.closeTab()', tabNumber);\n\treturn this.ready.then(function() {\n\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\treturn self.tabs[tabNumber].close(done);\n\t\t});\n\t});\n};\n\n//**************************************************//\n// Frames\n//**************************************************//\n\n/**\n * Get the name of the current frame.\n */\nexports.frameName = function() {\n\tvar self = this;\n\treturn this.ready.then(function() {\n\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\tdebug('.frameName()');\n\t\t\treturn self.page.get('frameName', done);\n\t\t});\n\t});\n};\n\n/**\n * Get the count of frames inside the current frame.\n */\nexports.frameCount = function() {\n\tvar self = this;\n\treturn this.ready.then(function() {\n\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\tdebug('.frameCount()');\n\t\t\treturn self.page.get('framesCount', done);\n\t\t});\n\t});\n};\n\n/**\n * Get the names of the frames inside the current frame.\n */\nexports.frameNames = function() {\n\tvar self = this;\n\treturn this.ready.then(function() {\n\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\tdebug('.frameNames()');\n\t\t\treturn self.page.get('framesName', done);\n\t\t});\n\t});\n};\n\n/**\n * Switch to the focused frame.\n */\nexports.switchToFocusedFrame = function() {\n\tvar self = this;\n\treturn this.ready.then(function() {\n\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\tdebug('.switchToFocusedFrame()');\n\t\t\treturn self.page.switchToFocusedFrame(done);\n\t\t});\n\t});\n};\n\n/**\n * Switch to a frame inside the current frame.\n * @param {string|integer} nameOrPosition - Name or position of frame\n * to switch to\n */\nexports.switchToFrame = function(nameOrPosition) {\n\tvar self = this;\n\treturn this.ready.then(function() {\n\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\tdebug('.switchToFrame()', nameOrPosition);\n\t\t\treturn self.page.switchToFrame(nameOrPosition, done);\n\t\t});\n\t});\n};\n/**\n * Switch to a child frame.\n * @deprecated Use switchToFrame instead.\n * @param {string|integer} nameOrPosition - Name or position of frame\n * to switch to\n */\nexports.switchToChildFrame = util.deprecate(function(nameOrPosition) {\n\tvar self = this;\n\treturn this.ready.then(function() {\n\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\tdebug('.switchToChildFrame()', nameOrPosition);\n\t\t\treturn self.page.switchToChildFrame(nameOrPosition, done);\n\t\t});\n\t});\n}, 'Horseman#switchToChildFrame: Use Horseman#switchToFrame instead');\n\n/**\n * Switch to the main frame.\n */\nexports.switchToMainFrame = function() {\n\tvar self = this;\n\treturn this.ready.then(function() {\n\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\tdebug('.switchToMainFrame()');\n\t\t\treturn self.page.switchToMainFrame(done);\n\t\t});\n\t});\n};\n\n/**\n * Switch to the parent frame of the current frame.\n */\nexports.switchToParentFrame = function() {\n\tvar self = this;\n\treturn this.ready.then(function() {\n\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\tdebug('.switchToParentFrame()');\n\t\t\treturn self.page.switchToParentFrame(done);\n\t\t});\n\t});\n};\n\n/**\n * Get the HTTP status of the last opened page.\n */\nexports.status = function() {\n\tvar self = this;\n\treturn this.ready.then(function() {\n\t\tvar status = self.responses[ self.targetUrl ];\n\n\t\t// If the open was for 'http://www.google.com',\n\t\t// the results may be stored in 'http://www.google.com/'\n\t\tif (typeof status === 'undefined') {\n\t\t\tstatus = self.responses[ self.targetUrl + '/'];\n\t\t}\n\t\treturn status;\n\t});\n};\n\n//**************************************************//\n// Callbacks\n//**************************************************//\n/**\n * Handles page events.\n * @param {String} eventType\n * @param {Function} callback\n *\n * eventType can be one of:\n *  initialized - callback()\n *  loadStarted - callback()\n *  loadFinished - callback(status)\n *  tabCreated - callback(tabNum, tab)\n *  tabClosed - callback(tabNum, tab)\n *  urlChanged - callback(targetUrl)\n *  navigationRequested - callback(url, type, willNavigate, main)\n *  resourceRequested - callback(requestData, networkRequest)\n *  resourceReceived - callback(response)\n *  pageCreated - callback(newPage)\n *  consoleMessage(msg, lineNum, sourceId)\n *  alert - callback(msg)\n *  confirm - callback(msg)\n *  prompt - callback(msg, defaultVal)\n *  filePicker - callback(oldFile)\n *  error - callback(msg, trace);\n *  timeout - callback(type)\n */\nexports.on = function(eventType, callback) {\n\tvar self = this;\n\treturn this.ready.then(function() {\n\t\tswitch (eventType) {\n\t\t\t/**\n\t\t\t * Horseman events\n\t\t\t */\n\t\t\tcase 'timeout':\n\t\t\t\tself.page.onTimeout = callback;\n\t\t\t\tbreak;\n\t\t\tcase 'tabCreated':\n\t\t\t\tself.onTabCreated = callback;\n\t\t\t\tbreak;\n\t\t\tcase 'tabClosed':\n\t\t\t\tself.onTabClosed = callback;\n\t\t\t\tbreak;\n\n\t\t\t/**\n\t\t\t * PhantomJS events\n\t\t\t */\n\t\t\t// Callback horseman needs to mess with\n\t\t\tcase 'resourceTimeout':\n\t\t\t\tself.page.onResouceTimeout = function(request) {\n\t\t\t\t\tcallback.apply(this, arguments);\n\t\t\t\t\t// A resourceTimeout is a timeout\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tself.page.onTimeout('resourceTimneout', request);\n\t\t\t\t\t}, 0);\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'urlChanged':\n\t\t\t\tself.page.onUrlChanged = function(targetUrl) {\n\t\t\t\t\tself.targetUrl = targetUrl;\n\t\t\t\t\treturn callback.apply(this, arguments);\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'resourceReceived':\n\t\t\t\tself.page.onResourceReceived = function(response) {\n\t\t\t\t\tself.responses[response.url] = response.status;\n\t\t\t\t\treturn callback.apply(this, arguments);\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase 'pageCreated':\n\t\t\t\tself.page.onPageCreated2 = callback;\n\t\t\t\tbreak;\n\t\t\tcase 'loadFinished':\n\t\t\t\tself.page.onLoadFinished2 = callback;\n\t\t\t\tbreak;\n\t\t\t// Others\n\t\t\tdefault:\n\t\t\t\tvar pageEvent = 'on' +\n\t\t\t\t\t\teventType.charAt(0).toUpperCase() + eventType.slice(1);\n\t\t\t\tself.page[pageEvent] = callback;\n\t\t}\n\n\t\tdebug('.on() ' + eventType + ' set.');\n\t});\n};\n/**\n * Handle page events inside PhantomJS\n * Phantom receives callback return value with .at but not with .on\n * @see on\n */\nexports.at = function(eventType, callback) {\n\treturn this.ready.then(function() {\n\t\tvar pageEvent = 'on' +\n\t\t\t\teventType.charAt(0).toUpperCase() + eventType.slice(1);\n\n\t\tthis.page.setFn(pageEvent, callback);\n\n\t\tdebug('.at() ' + eventType + ' set.');\n\t});\n};\n\n//**************************************************//\n// Waiting\n//**************************************************//\n\n/**\n * Wait for a specified period of time\n * @param {number} miliseconds - Approximate time to wait, in milliseconds.\n */\nexports.wait = function(milliseconds) {\n\tdebug('.wait()', milliseconds);\n\treturn this.ready.then(function() {\n\t\treturn HorsemanPromise.delay(milliseconds);\n\t});\n};\n\n/**\n * Wait for a page load to occur\n * @throws Horseman.TimeoutError\n * @param {object} options\n * @param {number} [options.timeout=undefined] - timeout options\n * @emits Horseman#timeout\n */\nexports.waitForNextPage = function(options) {\n\tdebug('.waitForNextPage()');\n\tvar self = this;\n\tvar startCnt = self.lastActionPageCnt;\n\tvar timeout;\n\tif(typeof(options) !== \"undefined\" && typeof(options.timeout)  === \"number\"){\n\t\ttimeout = options.timeout;\n\t} else {\n\t\ttimeout = self.options.timeout;\n\t}\n\treturn this.ready.then(function() {\n\t\tvar start = Date.now();\n\t\treturn new HorsemanPromise(function(resolve, reject) {\n\t\t\t\tvar waiting = setInterval(function() {\n\t\t\t\t\tif (self.pageCnt > startCnt) {\n\t\t\t\t\t\tdebug('.waitForNextPage() completed successfully');\n\t\t\t\t\t\tclearInterval(waiting);\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar diff = Date.now() - start;\n\t\t\t\t\t\tif (diff > timeout) {\n\t\t\t\t\t\t\tclearInterval(waiting);\n\t\t\t\t\t\t\tdebug('.waitForNextPage() timed out');\n\t\t\t\t\t\t\tif (typeof self.page.onTimeout === 'function') {\n\t\t\t\t\t\t\t\tself.page.onTimeout('waitForNextPage');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treject(new TimeoutError(\n\t\t\t\t\t\t\t\t\t'timeout duing .waitForNextPage() after ' +\n\t\t\t\t\t\t\t\t\t\tdiff + ' ms'));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, self.options.interval);\n\t\t\t});\n\t});\n};\n\n/**\n * Wait for a selector to be present on the current page\n * @param {string} - The selector on which to wait.\n * @param {object} options\n * @param {number} [options.timeout=undefined] - timeout options\n * @throws Horseman.TimeoutError\n * @emits Horseman#timeout\n */\nexports.waitForSelector = function(selector, options) {\n\tdebug('.waitForSelector()', selector, options);\n\tvar elementPresent = function elementPresent(selector) {\n\t\tvar els = window.jQuery ?\n\t\t\t\tjQuery(selector) : document.querySelectorAll(selector);\n\t\treturn els.length > 0;\n\t};\n\n\tvar opts = {\n\t\tfn : elementPresent,\n\t\targs : [selector],\n\t\tvalue : true\n\t};\n\n\tif(typeof(options) !== \"undefined\" && typeof(options.timeout)  === \"number\"){\n\t\topts.timeout = options.timeout;\n\t}\n\n\treturn this.waitFor(opts).then(function() {\n\t\tdebug('.waitForSelector() complete');\n\t});\n};\n\n/**\n * Waits for a function to evaluate to a given value in browser\n * @param {function | object} optsOrFn - If optsOrFn is a function, use the classic signature waitFor(fn, arg1, arg2, value), If arg is an object, use waitFor(options)\n * @param {array} optsOrFn.args - arguments of fn\n * @param {function} optsOrFn.fn - function to evaluate\n * @param {*} optsOrFn.value - expected value of function\n * @param {number} [optsOrFn.timeout=null] - timeout in ms\n * @param {...*} [arguments]\n * @param {*} value\n * @throws Horseman.TimeoutError\n * @emits Horseman#timeout\n */\nexports.waitFor = function() {\n\tvar args = Array.prototype.concat.apply([undefined], arguments);\n\treturn waitForPage.apply(this, args);\n};\n/**\n * Waits for a function to evaluate to a given value on the given page\n * @param {Page | undefined} page\n * @param {function | object} optsOrFn - If optsOrFn is a function, use the classic signature waitForPage(page, fn, arg1, arg2, value), If arg is an object, use waitForPage(page, options)\n * @param {array} optsOrFn.args - arguments of fn\n * @param {function} optsOrFn.fn - function to evaluate\n * @param {*} optsOrFn.value - expected value of function\n * @param {number} [optsOrFn.timeout=null] - timeout in ms\n * @param {...*} [arguments]\n * @param {*} value\n * @emits Horseman#TimeoutError\n */\nfunction waitForPage(page, optsOrFn) {\n\tvar self = this;\n\tvar args, value, fname, timeout = self.options.timeout, fn;\n\n\tif(typeof optsOrFn === \"function\"){\n\t\t\tfn = optsOrFn;\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t\tvalue = args.pop();\n\t\t\tfname = fn.name || '<anonymous>';\n\t} else if(typeof optsOrFn === \"object\"){\n\t\t\tfn = optsOrFn.fn;\n\t\t\targs = [page, fn].concat(optsOrFn.args || []);\n\t\t\tvalue = optsOrFn.value;\n\t\t\tfname = fn.name || '<anonymous>';\n\t\t\tif(optsOrFn.timeout){\n\t\t\t\ttimeout = optsOrFn.timeout;\n\t\t\t}\n\t}\n\n\tdebug.apply(debug, ['.waitFor()', fname].concat(args.slice(2)));\n\treturn this.ready.then(function() {\n\t\treturn new HorsemanPromise(function(resolve, reject) {\n\t\t\tvar start = Date.now();\n\t\t\tvar checkInterval = setInterval(function waitForCheck() {\n\t\t\t\tvar _page = page || self.page;\n\t\t\t\tvar diff = Date.now() - start;\n\t\t\t\tif (diff > timeout) {\n\t\t\t\t\tclearInterval(checkInterval);\n\t\t\t\t\tdebug('.waitFor() timed out');\n\t\t\t\t\tif (typeof _page.onTimeout === 'function') {\n\t\t\t\t\t\t_page.onTimeout('waitFor');\n\t\t\t\t\t}\n\t\t\t\t\treject(new TimeoutError(\n\t\t\t\t\t\t\t'timeout during .waitFor() after ' + diff + ' ms'));\n\t\t\t\t} else {\n\t\t\t\t\treturn evaluatePage.apply(self, args)\n\t\t\t\t\t\t.tap(function(res) {\n\t\t\t\t\t\t\tdebugv('.waitFor() iteration',\n\t\t\t\t\t\t\t\t\tfname,\n\t\t\t\t\t\t\t\t\tres,\n\t\t\t\t\t\t\t\t\tdiff,\n\t\t\t\t\t\t\t\t\tself.id\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then(function(res) {\n\t\t\t\t\t\t\tif (res === value) {\n\t\t\t\t\t\t\t\tdebug('.waitFor() completed successfully');\n\t\t\t\t\t\t\t\tclearInterval(checkInterval);\n\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(function(err) {\n\t\t\t\t\t\t\tclearInterval(checkInterval);\n\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, self.options.interval);\n\t\t});\n\t});\n}\n\n//**************************************************//\n// Configuration\n//**************************************************//\n\n/**\n * Change the proxy settings.\n * @param {string} ip - IP of proxy, or a URI (e.g. proto://user:pass@ip:port)\n * @param {integer} [port=80] - Port of proxy, override URI\n * @param {string} [type=http] - Type of proxy, overrides URI\n * @param {string} [user] - Proxy auth username, overrides URI\n * @param {string} [pass] - Proxy auth password, overrides URI\n */\nexports.setProxy = function(ip, port, type, user, pass) {\n\tvar self = this;\n\treturn this.ready.then(function() {\n\t\tif (ip) {\n\t\t\t// Handle URI (e.g. \"protocol://user:pass@ip:port\")\n\t\t\tvar parsed = url.parse(ip);\n\t\t\tif (!parsed.slashes) { // No protocol was supplied\n\t\t\t\tparsed = url.parse('http://' + ip);\n\t\t\t}\n\t\t\tip = parsed.hostname;\n\t\t\tport = port || parseInt(parsed.port) || 80;\n\t\t\ttype = type || parsed.protocol.replace(/:$/, '');\n\t\t\tif (parsed.auth) {\n\t\t\t\tvar auth = parsed.auth.split(':');\n\t\t\t\tuser = user || auth[0];\n\t\t\t\tpass = pass || auth[1];\n\t\t\t}\n\t\t\tuser = user || '';\n\t\t\tpass = pass || '';\n\t\t}\n\n\t\tdebug('setProxy', ip, port, type, user, pass);\n\t\treturn HorsemanPromise.fromCallback(function(done) {\n\t\t\treturn self.phantom.setProxy(ip, port, type, user, pass, done);\n\t\t});\n\t});\n};\n","/home/travis/build/npmtest/node-npmtest-node-horseman/node_modules/node-horseman/lib/HorsemanPromise.js":"'use strict';\n\n// Extend our copy of bluebird\nmodule.exports = require('bluebird/js/release/promise')();\n"}